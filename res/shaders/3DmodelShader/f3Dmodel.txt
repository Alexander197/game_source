#version 460
in vec2 texCoords;
in vec3 Normal;
in vec3 FragPos;

in mat3 TBN;

out vec4 frag_color;

uniform vec3 viewPos;

uniform sampler2D normalMap;

struct Material {
	sampler2D texture_diffuse_0;
	sampler2D texture_diffuse_1;
	sampler2D texture_diffuse_2;
	
	sampler2D texture_specular_0;
	sampler2D texture_specular_1;
	sampler2D texture_specular_2;

	float shininess;
};

uniform Material material;

struct DirLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight {
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	
	float cutOff;
	float outerCutOff;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	
	float constant;
	float linear;
	float quadratic;
};

#define NR_DIR_LIGHT 2
#define NR_POINT_LIGHT 3
#define NR_SPOT_LIGHT 3

uniform DirLight dirLight[NR_DIR_LIGHT];
uniform PointLight pointLight[NR_POINT_LIGHT];
uniform SpotLight spotLight[NR_SPOT_LIGHT];

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDirN = normalize(light.direction);
	
	float diff = max(dot(normal, lightDirN), 0.0);
	
	vec3 reflectDir = reflect(-lightDirN, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 specular = spec * light.specular * vec3(texture(material.texture_specular_0, texCoords));
	
	return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = light.position - fragPos;
	vec3 lightDirN = normalize(lightDir);
	
	float diff = max(dot(normal, lightDirN), 0.0);
	
	vec3 reflectDir = reflect(-lightDirN, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	float distance = length(lightDir);	
	float attenuation = 1.0 / (0.01 + light.constant + light.linear * distance + light.quadratic * distance * distance);
	
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 specular = spec * light.specular * vec3(texture(material.texture_specular_0, texCoords));
	
	return (ambient + diffuse + specular) * attenuation;
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = light.position - fragPos;
	vec3 lightDirN = normalize(lightDir);
	
	float theta = dot(lightDirN, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	
	float diff = max(dot(normal, lightDirN), 0.0);
	
	vec3 reflectDir = reflect(-lightDirN, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	float distance = length(lightDir);	
	float attenuation = 1.0 / (0.01 + light.constant + light.linear * distance + light.quadratic * distance * distance);
	
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 diffuse = diff * light.diffuse * vec3(texture(material.texture_diffuse_0, texCoords));
	vec3 specular = spec * light.specular * vec3(texture(material.texture_specular_0, texCoords));
	
	return (ambient + (diffuse + specular) * intensity) * attenuation;
}

void main() {
	
	vec3 normal = texture(normalMap, texCoords).rgb;
	normal = normalize(normal * 2.0 - 1.0);
	normal = normalize(TBN * normal);
	
	
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	
	vec3 result = vec3(0.0);
	
	for(int i = 0; i < NR_DIR_LIGHT; i++)
	{
		result += CalcDirLight(dirLight[i], norm, viewDir);
	}
	for(int i = 0; i < NR_POINT_LIGHT; i++)
	{
		result += CalcPointLight(pointLight[i], norm, FragPos, viewDir);
	}
	for(int i = 0; i < NR_SPOT_LIGHT; i++)
	{
		result += CalcSpotLight(spotLight[i], norm, FragPos, viewDir);
	}
	
	
	frag_color = vec4(result, 1.0);
}