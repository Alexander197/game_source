#version 460
in vec2 texCoords;

in vec3 Normal;
in vec3 FragPos;

out vec4 frag_color;


uniform sampler2D tex;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main() {
	//frag_color = texture(tex, texCoords);
	
	float ambientStrenth = 0.1;
	vec3 ambient = ambientStrenth * lightColor;
	
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
		
	float specularStrength = 0.4;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
	vec3 specular = specularStrength * spec * lightColor;
	
	vec4 result = vec4((ambient + diffuse + specular), 1.0) * texture(tex, texCoords);
	vec3 result1 = (ambient + diffuse + specular) * vec3(0.8, 0.8, 0.8);
	
	frag_color = result;
	//frag_color = vec4(result1, 1.0);
	
	//if(frag_color.rgb == vec3(0.0))
	//{
	//	discard;
	//}
}